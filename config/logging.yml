#@ load("@ytt:data", "data")
#@ load("@ytt:library", "library")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:base64", "base64")

#@ def logging_values():
system_domain: #@ data.values.system_domain
system_namespace: #@ data.values.system_namespace

log_cache_ca: 
  crt: #@ data.values.log_cache_ca.crt
  key: #@ data.values.log_cache_ca.key

log_cache:
  crt: #@ data.values.log_cache.crt
  key: #@ data.values.log_cache.key

log_cache_metrics:
  crt: #@ data.values.log_cache_metrics.crt
  key: #@ data.values.log_cache_metrics.key

log_cache_gateway:
  crt: #@ data.values.log_cache_gateway.crt
  key: #@ data.values.log_cache_gateway.key

log_cache_syslog:
  crt: #@ data.values.log_cache_syslog.crt
  key: #@ data.values.log_cache_syslog.key

metric_proxy:
  crt: #@ data.values.metric_proxy.crt
  key: #@ data.values.metric_proxy.key
#@ end

#@ logging = library.get("github.com/cloudfoundry/cf-k8s-logging")
--- #@ template.replace(logging.with_data_values(logging_values()).eval())

#@overlay/match by=overlay.subset({"kind":"Service", "metadata":{"name": "log-cache"}})
---
spec:
  ports:
  #@overlay/match by=overlay.subset({"name": "http"})
  - name: https
--- #! explanation: the log-cache http proxy terminates its own TLS and the istio-ingressgateway is configured
    #! with a DestinationRule to establish SIMPLE TLS with it. This is incompatible with Istio STRICT mTLS.
apiVersion: "authentication.istio.io/v1alpha1"
kind: "Policy"
metadata:
  name: "log-cache-allow-plaintext"
  namespace: #@ data.values.system_namespace
spec:
  targets:
  - name: log-cache
  peers:
  - mtls:
      mode: PERMISSIVE

---
apiVersion: v1
kind: Secret
metadata:
  name: metric-proxy-tls-certs
  namespace: #@ data.values.system_namespace
data:
  tls.crt: #@ data.values.metric_proxy.crt
  tls.key: #@ data.values.metric_proxy.key
  tls.ca: #@ data.values.log_cache_ca.crt